{"version":3,"sources":["components/ConfigScreen.tsx","api/sendgrid.ts","components/Field.tsx","index.tsx"],"names":["Config","props","onConfigure","a","sdk","app","getCurrentState","currentState","parameters","state","targetState","handleApiKeyChange","event","console","log","target","value","setState","apikey","this","getParameters","setReady","className","css","margin","width","required","name","id","labelText","onChange","helpText","Component","cache","setupCache","maxAge","api","axios","create","adapter","getPage","key","next","method","url","headers","authorization","params","language_code","then","response","data","catch","error","result","_metadata","getPaginatedTemplates","undefined","res","getTemplates","results","items","concat","Field","installation","useState","field","getValue","current","setCurrent","templates","setTemplates","filteredItems","setFilteredItems","useEffect","fetchData","handleQueryChange","useCallback","query","matches","filter","item","keywords","split","keyword","expression","RegExp","join","match","length","maxHeight","onQueryChange","setValue","isLoading","options","map","option","noteType","init","root","document","getElementById","location","locations","LOCATION_APP_CONFIG","component","LOCATION_ENTRY_FIELD","forEach","componentLocationSetting","is","render"],"mappings":"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","file":"static/js/main.4dab40f4.chunk.js","sourcesContent":["import React, { Component } from \"react\"\nimport { AppExtensionSDK } from \"@contentful/app-sdk\"\nimport {\n  Heading,\n  Form,\n  Workbench,\n  Paragraph,\n  TextField,\n  FieldGroup,\n} from \"@contentful/forma-36-react-components\"\nimport { css } from \"emotion\"\n\nexport interface AppInstallationParameters {\n  apikey?: any\n}\n\ninterface ConfigProps {\n  sdk: AppExtensionSDK\n}\n\ninterface ConfigState {\n  parameters: AppInstallationParameters\n}\n\nexport default class Config extends Component<ConfigProps, ConfigState> {\n  constructor(props: ConfigProps) {\n    super(props)\n    this.state = { parameters: { apikey: ''} }\n\n    // `onConfigure` allows to configure a callback to be\n    // invoked when a user attempts to install the app or update\n    // its configuration.\n    props.sdk.app.onConfigure(() => this.onConfigure())\n  }\n\n  async componentDidMount() {\n    // Get current parameters of the app.\n    // If the app is not installed yet, `parameters` will be `null`.\n    const parameters: AppInstallationParameters | null = await this.props.sdk.app.getParameters()\n\n    this.setState(parameters ? { parameters } : this.state, () => {\n      // Once preparation has finished, call `setReady` to hide\n      // the loading screen and present the app to a user.\n      this.props.sdk.app.setReady()\n    })\n  }\n\n  onConfigure = async () => {\n    // This method will be called when a user clicks on \"Install\"\n    // or \"Save\" in the configuration screen.\n    // for more details see https://www.contentful.com/developers/docs/extensibility/ui-extensions/sdk-reference/#register-an-app-configuration-hook\n\n    // Get current the state of EditorInterface and other entities\n    // related to this app installation\n    const currentState = await this.props.sdk.app.getCurrentState()\n\n    return {\n      // Parameters to be persisted as the app configuration.\n      parameters: this.state.parameters,\n      // In case you don't want to submit any update to app\n      // locations, you can just pass the currentState as is\n      targetState: currentState,\n    }\n  }\n\n  handleApiKeyChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { parameters } = this.state;\n    console.log(event.target.value)\n    this.setState({ parameters: {\n      ...parameters,\n      apikey: event.target.value\n    }});\n  }\n\n\n  render() {\n    return (\n      <Workbench className={css({ margin: \"80px\" })}>\n        <Form\n          className={css({ width: \"100%\" })}\n        >\n          <FieldGroup className={css({ width: \"50%\" })}>\n            <Heading>App Config</Heading>\n            <Paragraph>\n              Welcome to your contentful app. This is your config page.\n            </Paragraph>\n            <TextField\n              required\n              name=\"apikey\"\n              id=\"apikey\"\n              labelText=\"Sendgrind API Key\"\n              value={this.state.parameters.apikey}\n              onChange={this.handleApiKeyChange}\n              helpText=\"Provide Sendgrid API Key\"\n            />\n          </FieldGroup>\n        </Form>\n      </Workbench>\n    )\n  }\n}\n","import axios from \"axios\"\nimport { setupCache } from \"axios-cache-adapter\"\n\ninterface Response {\n  result: Item[]\n  _metadata: {\n    next?: string\n  }\n}\n\nexport interface Item {\n  id: string\n  name: string\n}\nconst cache = setupCache({\n  maxAge: 60 * 1000,\n})\n\nconst api = axios.create({\n  adapter: cache.adapter,\n})\n\nconst getPage= (key: string, next?: string): Promise<Response> =>\n  api({\n    method: \"GET\",\n    url: next? next: \"https://api.sendgrid.com/v3/templates?page_size=200&generations=dynamic\",\n    headers: {\n      \"content-type\": \"application/octet-stream\",\n      authorization: `bearer ${key}`,\n    },\n    params: {\n      language_code: \"en\",\n    },\n  })\n    .then((response: any) => {\n      return response.data as Response\n    })\n    .catch((error: any) => ({ result: [], _metadata:{}}))\n\nasync function *getPaginatedTemplates(key: string) {\n      let res\n      let next = undefined\n      do {\n        res = await getPage(key, next)\n        for (const result of res.result) {\n          yield result\n        }\n        next = res._metadata.next\n      } while (next)\n    }\n\nexport const getTemplates = async (key: string) => {\n  let results:Item[] = []\n  for await (const items of getPaginatedTemplates(key)) {\n    results = results.concat(items)\n  }\n  return results\n}","import React, { useState, useEffect, useCallback } from \"react\"\nimport {\n  Autocomplete,\n  Note,\n  HelpText,\n  Heading,\n} from \"@contentful/forma-36-react-components\"\nimport { FieldExtensionSDK } from \"@contentful/app-sdk\"\nimport { Item, getTemplates } from \"../api/sendgrid\"\n\ninterface FieldProps {\n  sdk: FieldExtensionSDK\n}\ninterface Parameters {\n  apikey?: string\n}\n\nconst Field = (props: FieldProps) => {\n  const { sdk } = props\n  const { apikey }: Parameters = sdk.parameters.installation\n\n  // If you only want to extend Contentful's default editing experience\n  // reuse Contentful's editor components\n  // -> https://www.contentful.com/developers/docs/extensibility/field-editors/\n\n  const [current, setCurrent] = useState<Item>({\n    id: sdk.field.getValue(),\n    name: \"\",\n  })\n  const [templates, setTemplates] = useState<Item[]>([])\n  const [filteredItems, setFilteredItems] = useState<Item[]>(templates)\n\n  useEffect(() => {\n    const fetchData = async () => {\n      if (apikey) {\n        const templates = await getTemplates(apikey)\n        setTemplates(templates)\n        setFilteredItems(templates)\n      }\n    }\n    fetchData()\n  }, [apikey])\n\n  const handleQueryChange = useCallback(\n    (query: string) => {\n      const matches = query\n        ? templates.filter(\n            (item) => {\n              const keywords = query.split(\" \").filter((keyword) => keyword)\n              const expression = new RegExp(keywords.join(\".*\"), \"ig\")\n              const matches = item.name.match(expression) || []\n              return matches.length\n            }\n            // item.name.toLowerCase().includes(query.toLowerCase())\n          )\n        : templates\n      setFilteredItems(matches)\n    },\n    [setFilteredItems, templates]\n  )\n\n  const name = templates.filter(({ id }) => id === current.id)[0]\n    ?.name\n  return (\n    <>\n      <Autocomplete<Item>\n        maxHeight={90}\n        onQueryChange={handleQueryChange}\n        items={filteredItems}\n        // onChange={()=>{}}\n        onChange={({ id, name }) => {\n          sdk.field.setValue(id)\n          setCurrent({ id, name })\n        }}\n        isLoading={templates.length === 0}\n      >\n        {(options: Item[]) =>\n          options.map((option: Item) => (\n            <span key={option.id}>{option.name}</span>\n          ))\n        }\n      </Autocomplete>\n\n      <Note noteType={name?\"positive\":\"warning\"}>\n        <HelpText>\n          {name}\n        </HelpText>\n        <Heading>{current.id}</Heading>\n      </Note>\n    </>\n  )\n}\n\nexport default Field\n","import React from 'react';\nimport { render } from 'react-dom';\n\nimport {\n  AppExtensionSDK,\n  FieldExtensionSDK,\n  init,\n  locations,\n} from '@contentful/app-sdk';\nimport '@contentful/forma-36-react-components/dist/styles.css';\nimport '@contentful/forma-36-fcss/dist/styles.css';\nimport '@contentful/forma-36-tokens/dist/css/index.css';\nimport './index.css';\n\nimport Config from './components/ConfigScreen';\nimport Field from './components/Field';\n\nimport LocalhostWarning from './components/LocalhostWarning';\n\nif (process.env.NODE_ENV === 'development' && window.self === window.top) {\n  // You can remove this if block before deploying your app\n  const root = document.getElementById('root');\n  render(<LocalhostWarning />, root);\n} else {\n  init((sdk) => {\n    const root = document.getElementById('root');\n\n    // All possible locations for your app\n    // Feel free to remove unused locations\n    // Dont forget to delete the file too :)\n    const ComponentLocationSettings = [\n      {\n        location: locations.LOCATION_APP_CONFIG,\n        component: <Config sdk={sdk as AppExtensionSDK} />,\n      },\n      {\n        location: locations.LOCATION_ENTRY_FIELD,\n        component: <Field sdk={sdk as FieldExtensionSDK} />,\n      },\n    ];\n\n    // Select a component depending on a location in which the app is rendered.\n    ComponentLocationSettings.forEach((componentLocationSetting) => {\n      if (sdk.location.is(componentLocationSetting.location)) {\n        render(componentLocationSetting.component, root);\n      }\n    });\n  });\n}\n"],"sourceRoot":""}